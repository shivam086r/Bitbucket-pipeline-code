image: shivam086r/pipeline-image:latest

pipelines:
  custom:
    build-and-deploy:
      - step:
          name: Build and Deploy to S3
          caches:
            - maven
          script:
            # Check Maven, AWS CLI, and Java versions
            - mvn -v
            - java -version

            # Configure AWS CLI
            - echo "Configuring AWS CLI"
            - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            - aws configure set region $AWS_DEFAULT_REGION

            # Set the service name
            - SERVICE_NAME="utility-service"  # Set the service name variable here
            - BRANCH="$BITBUCKET_BRANCH"  # Bitbucket pipeline default branch variable

             # Fail the pipeline if the branch is main
            - |
              if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
                echo "Build from 'main' or 'master' branch is not allowed. Failing pipeline."
                exit 1
              fi

            # Extract the version directly from pom.xml (the version is under <version> in your pom.xml)
            - BUILD_VERSION=$(awk '/<groupId>com.javatechie<\/groupId>/,/<\/project>/' pom.xml | grep -oPm1 "(?<=<version>)(.*)(?=</version>)")
 
            # Debugging: Output the final build version
            - echo "Final build version ${BUILD_VERSION}"

             # Check if the branch is release
            - |
              if [[ "$BRANCH" == "release"* ]]; then
                # If the branch is release, do not add -SNAPSHOT
                echo "Building version for stable branch"
              else
                # If the branch is not release, append -SNAPSHOT to the version
                BUILD_VERSION="${BUILD_VERSION}-SNAPSHOT"
                echo "Building version for other branchs ${BUILD_VERSION}"

                # Update pom.xml with the new version using sed
                sed -i "s|<version>${BUILD_VERSION%-SNAPSHOT}</version>|<version>${BUILD_VERSION}</version>|" pom.xml
                echo "Updated pom.xml version to ${BUILD_VERSION}"
              fi

            # Build the application
            - echo "Building the application"
            - mvn -B -DskipTests clean package

            # Debugging: List files in the target directory
            - echo "Listing files in target directory"
            - ls target/

            # Upload the JAR file to S3 without tags
            - aws s3 cp target/paybyte-${SERVICE_NAME}-${BUILD_VERSION}.jar s3://paybyte-artifacts/${SERVICE_NAME}/

            # Apply tags using s3api after the file is uploaded
            - aws s3api put-object-tagging --bucket paybyte-artifacts --key "${SERVICE_NAME}/paybyte-${SERVICE_NAME}-${BUILD_VERSION}.jar" --tagging "TagSet=[{Key=file-type,Value=jar}]"
         
            # Tagging Commit
            - git config --global credential.helper store
            - echo "https://${BITBUCKET_USERNAME}:${BITBUCKET_APP_PASSWORD}@bitbucket.org" > ~/.git-credentials

            # Tagging Commit
            - git config --global user.name "shivamrahangdale91"
            - git config --global user.email "shivamrahangdale91@gmail.com"

            # Debugging: Print the BUILD_VERSION
            - echo "Build version for tagging ${BUILD_VERSION}"

            # Fetch existing tags
            - git fetch --tags

            # Delete the tag locally if it already exists
            - git tag -d "${BUILD_VERSION}" || true

            # Create the new tag
            - git tag -a "${BUILD_VERSION}" -m "Build"

            # Push the tag to the remote repository using HTTPS with credentials
            - git push --tags

            # Get the current branch name
            - BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

            # Check if the release
            - >
             if [[ "$BRANCH_NAME" == release* ]]; then
                echo "Branch is release, proceeding with version increment"
                # Step 1: Extract the build number (version) from pom.xml
                BUILD_NUMBER=$(awk '/<groupId>com.javatechie<\/groupId>/,/<\/project>/' pom.xml | grep -oPm1 "(?<=<version>)(.*)(?=</version>)")

                # Step 2: Increment the last segment of the version number
                # Split the version into parts (major, minor, patch), then increment the patch version
                IFS='.' read -r -a VERSION_PARTS <<< "$BUILD_NUMBER"

                # Convert the patch number to an integer (removes leading zeros)
                PATCH_NUMBER=${VERSION_PARTS[2]}  # Get the patch number (third segment)
                PATCH_NUMBER=$((10#$PATCH_NUMBER))  # Ensures it's treated as a decimal number (removes any leading zeros)
                
                # Increment the patch number (the third segment)
                VERSION_PARTS[2]=$((PATCH_NUMBER + 1))
                
                # Format the patch number to always be 2 digits (e.g., 03 instead of 3)
                PATCH_NUMBER=$(printf "%02d" ${VERSION_PARTS[2]})
                
                # Join the version parts back into a single string
                NEW_BUILD_NUMBER="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_NUMBER"

                # Step 3: Update the version in pom.xml using sed
                sed -i "s/<version>$BUILD_NUMBER<\/version>/<version>$NEW_BUILD_NUMBER<\/version>/" pom.xml

                # Step 4: Commit the changes to Git
                git add pom.xml
                git commit -m "PAYB-360  updated version $NEW_BUILD_NUMBER"
                git push
              else
                echo "Skipping increment of version as the branch is not release"
              fi
